setwd("~/GitHub/LASI-Tutorial/5-Learning-Environments/SocraticRank")
mydata = read.csv("mdl_forum_posts_scrubbed_snadata_question_info.csv")
require('igraph')
require('dplyr')
mydata = read.csv("mdl_forum_posts_scrubbed_snadata_question_info.csv")
mydata$isQuestion = mydata$message_q_mark == 1;
graphData = mydata[,c("userid_from", "userid_to", "isQuestion")]
colnames(graphData) = c("from", "to", "question")
graphData = graphData[graphData$question, ]
graphData = graphData %>% group_by(from, to) %>% summarise(count=n())
graphData[graphData$from == graphData$to,]$count = 0
graphData = graphData[graphData$count != 0,]
mygraph = graph.data.frame(graphData)
pranks = page.rank(mygraph, weights=graphData$count)$vector
V(mygraph)$rank = (pranks - mean(pranks)) / sd(pranks)
highRankGraph = induced.subgraph(mygraph, which(V(mygraph)$rank > 5))
layout = layout.circle(highRankGraph)
plot(highRankGraph,
main="Top Question Elictors on Moodle at a University (z-scores of SocraticRank > 5)",
sub="Node Size = SocraticRank (PageRank); Edge Value = # of Reply Posts",
edge.label = E(highRankGraph)$count,
edge.arrow.size = .25,
edge.label.cex = .5,
vertex.size = 5 * (V(highRankGraph)$rank / max(V(highRankGraph)$rank)),
vertex.label = V(highRankGraph)$name,
vertex.label.cex = .5,
vertex.label.dist = .25,
layout=layout)
files <- system("ls mdl_forum_posts_scrubbed_snadata_with_courseid.csv",intern=T)
rm(list=ls(all=TRUE))
library(igraph)
library(ggplot2)
igraph.options(print.vertex.attributes = TRUE)
igraph.options(print.edge.attributes = TRUE)
files <- system("ls mdl_forum_posts_scrubbed_snadata_with_courseid.csv",intern=T)
for (i in 1:length(files)) {
i = 1
fileNamer = as.character(i)
#Import the files
#	el <- read.table(files[i], header=TRUE, dec=".", fill=TRUE)
# for a comma seperated file, you just add in the parameter "sep=",""
el <- read.table(files[i], header=TRUE, sep=",", dec=".", fill=TRUE)
# based on variable values
subsetEL <- el[ which(el$class_course_id == 55113),]
#	subsetEL <- subset(el, class_course_id = 40491, select= c(userid_from, userid_to,  id,created, class_course_id))
#	subsetEL <- subset(el, class_course_id = c(40491, 51891, 55113, 55290))
#	subsetEL <- subset(el, class_course_id == 40491 || class_course_id == 51891)
#or
el <- subsetEL
## This graph is directed
disAll <-graph.data.frame(el, directed=TRUE)
V(disAll)$label <- V(disAll)$name
# layout.fruchterman.reingold
# until now, I have obfuscated the process of weighting data by
# including data sets that are already weighted
# layout.kamada.kawai(disAll, weights=E(disAll)$weight)
# for an undirected graph
# layout_with_kk(disAll)
layout_with_sugiyama(disAll)
# weights not calculated yet
# E(disAll)$width <- E(disAll)$weight/25
E(disAll)$arrow.size <-0.4
#	layout.spring(disAll,weights=E(disAll)$weight)
# size of sphere calculated based on the betweenness value
V(disAll)$size <-(3+sqrt(sqrt(betweenness(disAll, v=V(disAll)))))
g<-disAll
if (is.connected(g)){
com <- spinglass.community(g, spins=8)
V(g)$color <- com$membership+1
}
# This seems redundent
# g <- set.graph.attribute(g, "layout", layout.kamada.kawai(g))
layout_with_sugiyama(g)
#output the file
filename=paste("../../output/","community",i,"b2.pdf")
pdf(filename)
#plot.igraph(g)
plot(g, vertex.label.dist=.5, vertex.label.cex=.7, vertex.label.color="black",
vertex.frame.color="white")
dev.off()
}
files <- system("ls mdl_forum_posts_scrubbed_snadata_with_courseid.csv",intern=T)
setwd("~/GitHub/LASI-Tutorial/5-Learning-Environments/SocraticRank")
for (i in 1:length(files)) {
i = 1
fileNamer = as.character(i)
#Import the files
#	el <- read.table(files[i], header=TRUE, dec=".", fill=TRUE)
# for a comma seperated file, you just add in the parameter "sep=",""
el <- read.table(files[i], header=TRUE, sep=",", dec=".", fill=TRUE)
# based on variable values
subsetEL <- el[ which(el$class_course_id == 55113),]
#	subsetEL <- subset(el, class_course_id = 40491, select= c(userid_from, userid_to,  id,created, class_course_id))
#	subsetEL <- subset(el, class_course_id = c(40491, 51891, 55113, 55290))
#	subsetEL <- subset(el, class_course_id == 40491 || class_course_id == 51891)
#or
el <- subsetEL
## This graph is directed
disAll <-graph.data.frame(el, directed=TRUE)
V(disAll)$label <- V(disAll)$name
# layout.fruchterman.reingold
# until now, I have obfuscated the process of weighting data by
# including data sets that are already weighted
# layout.kamada.kawai(disAll, weights=E(disAll)$weight)
# for an undirected graph
# layout_with_kk(disAll)
layout_with_sugiyama(disAll)
# weights not calculated yet
# E(disAll)$width <- E(disAll)$weight/25
E(disAll)$arrow.size <-0.4
#	layout.spring(disAll,weights=E(disAll)$weight)
# size of sphere calculated based on the betweenness value
V(disAll)$size <-(3+sqrt(sqrt(betweenness(disAll, v=V(disAll)))))
g<-disAll
if (is.connected(g)){
com <- spinglass.community(g, spins=8)
V(g)$color <- com$membership+1
}
# This seems redundent
# g <- set.graph.attribute(g, "layout", layout.kamada.kawai(g))
layout_with_sugiyama(g)
#output the file
filename=paste("../../output/","community",i,"b2.pdf")
pdf(filename)
#plot.igraph(g)
plot(g, vertex.label.dist=.5, vertex.label.cex=.7, vertex.label.color="black",
vertex.frame.color="white")
dev.off()
}
setwd("~/GitHub/LASI-Tutorial/5-Learning-Environments/CourseData-Provenance/SNA_Ready_mdl_forum_posts_scrubbed_csv")
for (i in 1:length(files)) {
i = 1
fileNamer = as.character(i)
#Import the files
#	el <- read.table(files[i], header=TRUE, dec=".", fill=TRUE)
# for a comma seperated file, you just add in the parameter "sep=",""
el <- read.table(files[i], header=TRUE, sep=",", dec=".", fill=TRUE)
# based on variable values
subsetEL <- el[ which(el$class_course_id == 55113),]
#	subsetEL <- subset(el, class_course_id = 40491, select= c(userid_from, userid_to,  id,created, class_course_id))
#	subsetEL <- subset(el, class_course_id = c(40491, 51891, 55113, 55290))
#	subsetEL <- subset(el, class_course_id == 40491 || class_course_id == 51891)
#or
el <- subsetEL
## This graph is directed
disAll <-graph.data.frame(el, directed=TRUE)
V(disAll)$label <- V(disAll)$name
# layout.fruchterman.reingold
# until now, I have obfuscated the process of weighting data by
# including data sets that are already weighted
# layout.kamada.kawai(disAll, weights=E(disAll)$weight)
# for an undirected graph
# layout_with_kk(disAll)
layout_with_sugiyama(disAll)
# weights not calculated yet
# E(disAll)$width <- E(disAll)$weight/25
E(disAll)$arrow.size <-0.4
#	layout.spring(disAll,weights=E(disAll)$weight)
# size of sphere calculated based on the betweenness value
V(disAll)$size <-(3+sqrt(sqrt(betweenness(disAll, v=V(disAll)))))
g<-disAll
if (is.connected(g)){
com <- spinglass.community(g, spins=8)
V(g)$color <- com$membership+1
}
# This seems redundent
# g <- set.graph.attribute(g, "layout", layout.kamada.kawai(g))
layout_with_sugiyama(g)
#output the file
filename=paste("../../output/","community",i,"b2.pdf")
pdf(filename)
#plot.igraph(g)
plot(g, vertex.label.dist=.5, vertex.label.cex=.7, vertex.label.color="black",
vertex.frame.color="white")
dev.off()
}
files
getwd()
files <- system("ls mdl_forum_posts_scrubbed_snadata_with_courseid.csv",intern=T)
files
for (i in 1:length(files)) {
i = 1
fileNamer = as.character(i)
#Import the files
#	el <- read.table(files[i], header=TRUE, dec=".", fill=TRUE)
# for a comma seperated file, you just add in the parameter "sep=",""
el <- read.table(files[i], header=TRUE, sep=",", dec=".", fill=TRUE)
# based on variable values
subsetEL <- el[ which(el$class_course_id == 55113),]
#	subsetEL <- subset(el, class_course_id = 40491, select= c(userid_from, userid_to,  id,created, class_course_id))
#	subsetEL <- subset(el, class_course_id = c(40491, 51891, 55113, 55290))
#	subsetEL <- subset(el, class_course_id == 40491 || class_course_id == 51891)
#or
el <- subsetEL
## This graph is directed
disAll <-graph.data.frame(el, directed=TRUE)
V(disAll)$label <- V(disAll)$name
# layout.fruchterman.reingold
# until now, I have obfuscated the process of weighting data by
# including data sets that are already weighted
# layout.kamada.kawai(disAll, weights=E(disAll)$weight)
# for an undirected graph
# layout_with_kk(disAll)
layout_with_sugiyama(disAll)
# weights not calculated yet
# E(disAll)$width <- E(disAll)$weight/25
E(disAll)$arrow.size <-0.4
#	layout.spring(disAll,weights=E(disAll)$weight)
# size of sphere calculated based on the betweenness value
V(disAll)$size <-(3+sqrt(sqrt(betweenness(disAll, v=V(disAll)))))
g<-disAll
if (is.connected(g)){
com <- spinglass.community(g, spins=8)
V(g)$color <- com$membership+1
}
# This seems redundent
# g <- set.graph.attribute(g, "layout", layout.kamada.kawai(g))
layout_with_sugiyama(g)
#output the file
filename=paste("../../output/","community",i,"b2.pdf")
pdf(filename)
#plot.igraph(g)
plot(g, vertex.label.dist=.5, vertex.label.cex=.7, vertex.label.color="black",
vertex.frame.color="white")
dev.off()
}
clear
clean
setwd("~/GitHub/LASI-Tutorial")
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
library(igraph)
library(ggplot2)
library(blockmodeling)
igraph.options(print.vertex.attributes = TRUE)
igraph.options(print.edge.attributes = TRUE)
mod3<- read.graph("mod3d.net", format="pajek")
mod4<- read.graph("mod4d.net", format="pajek")
mod5<- read.graph("mod5d.net", format="pajek")
mod6<- read.graph("mod6d.net", format="pajek")
str(mod5)
mod5<- read.graph("mod5d.net", format="pajek")
setwd("~/GitHub/LASI-Tutorial/4-IT&P")
mod3<- read.graph("mod3d.net", format="pajek")
mod4<- read.graph("mod4d.net", format="pajek")
mod5<- read.graph("mod5d.net", format="pajek")
mod6<- read.graph("mod6d.net", format="pajek")
str(mod3)
id
id
V(mod5)$name <- V(mod5)$id
V(mod6)$name <- V(mod6)$id
mod3 <- delete.vertices(mod3, c(2,9,19,20,21))
mod4 <- delete.vertices(mod4, c(8,18,19))
mod5 <- delete.vertices(mod5, c(8))
mod6 <- delete.vertices(mod6, c(8))
mod3m <- get.adjacency(mod3)
mod4m <- get.adjacency(mod4)
mod5m <- get.adjacency(mod5)
mod6m <- get.adjacency(mod6)
V(mod3)$label <- V(mod3)$id
V(mod3)$shape <- "none"
V(mod3)[ x == 1 ]$shape <- "vrectangle"
V(mod3)[ x == 2 ]$shape <- "crectangle"
V(mod3)[ x == 3 ]$shape <- "rectangle"
V(mod3)[ x == 4 ]$shape <- "circle"
V(mod3)[ x == 5 ]$shape <- "square"
V(mod3)[ x == 6 ]$shape <- "csquare"
V(mod3)[ x == 1 ]$color <- gray(0)
V(mod3)[ x == 2 ]$color <- gray(.2)
V(mod3)[ x == 3 ]$color <- gray(.4)
V(mod3)[ x == 4 ]$color <- gray(.6)
V(mod3)[ x == 5 ]$color <- gray(.8)
V(mod3)[ x == 6 ]$color <- gray(1)
V(mod3)$labelcolor <- "black"
V(mod3)[ x == 1 ]$label.color <- "white"
V(mod3)[ x == 2 ]$label.color <- "white"
V(mod3)[ x == 3 ]$label.color <- "white"
V(mod3)[ x == 4 ]$label.color <- "white"
V(mod3)[ x == 5 ]$label.color <- "black"
V(mod3)[ x == 6 ]$label.color <- "black"
E(mod3)$width <- sqrt(E(mod3)$weight/50)
E(mod3)$arrow.size <-0.4
width
width
E(mod3)$arrow.size <-0.4
plot.igraph(mod3, vertex.label.cex=.7, layout=layout.fruchterman.reingold(mod3, weights=V(mod3)$weight))
E(mod3)$arrow.size <-0.4
plot.igraph(mod3, vertex.label.cex=.7, layout=layout.fruchterman.reingold(mod3, weights=V(mod3)$weight))
E(mod3)$arrow.size <-0.04
plot.igraph(mod3, vertex.label.cex=.7, layout=layout.fruchterman.reingold(mod3, weights=V(mod3)$weight))
setwd("~/GitHub/LASI-Tutorial/5-Learning-Environments/SocraticRank")
require('igraph')
require('dplyr')
mydata = read.csv("mdl_forum_posts_scrubbed_snadata_question_info.csv")
mydata$isQuestion = mydata$message_q_mark == 1;
graphData = mydata[,c("userid_from", "userid_to", "isQuestion")]
colnames(graphData) = c("from", "to", "question")
graphData = graphData[graphData$question, ]
graphData = graphData %>% group_by(from, to) %>% summarise(count=n())
graphData[graphData$from == graphData$to,]$count = 0
graphData = graphData[graphData$count != 0,]
mygraph = graph.data.frame(graphData)
pranks = page.rank(mygraph, weights=graphData$count)$vector
V(mygraph)$rank = (pranks - mean(pranks)) / sd(pranks)
highRankGraph = induced.subgraph(mygraph, which(V(mygraph)$rank > 5))
layout = layout.circle(highRankGraph)
plot(highRankGraph,
main="Top Question Elictors on Moodle at a University (z-scores of SocraticRank > 5)",
sub="Node Size = SocraticRank (PageRank); Edge Value = # of Reply Posts",
edge.label = E(highRankGraph)$count,
edge.arrow.size = .25,
edge.label.cex = .5,
vertex.size = 5 * (V(highRankGraph)$rank / max(V(highRankGraph)$rank)),
vertex.label = V(highRankGraph)$name,
vertex.label.cex = .5,
vertex.label.dist = .25,
layout=layout)
plot(highRankGraph,
main="Top Question Elictors on Moodle at a University (z-scores of SocraticRank > 5)",
sub="Node Size = SocraticRank (PageRank); Edge Value = # of Reply Posts",
edge.label = E(highRankGraph)$count,
edge.arrow.size = .025,
edge.label.cex = .5,
vertex.size = 5 * (V(highRankGraph)$rank / max(V(highRankGraph)$rank)),
vertex.label = V(highRankGraph)$name,
vertex.label.cex = .5,
vertex.label.dist = .25,
layout=layout)
networkList <- read.table("results.txt",header=TRUE,row.names=NULL)
setwd("~/GitHub/LASI-Tutorial/6-FacebookThreads")
networkList <- read.table("results.txt",header=TRUE,row.names=NULL)
str(networkList)
networkList$day_of_year <- factor(networkList$day_of_year)
str(networkList)
networkList$day_of_year <- factor(networkList$day_of_year)
networkList$topicId <- factor(networkList$topicId)
str(networkList)
networkList$day_of_year <- factor(networkList$day_of_year)
networkList$topicId <- factor(networkList$topicId)
str(networkList)
headerCodeList <- read.table("results_header_code.txt",header=TRUE,row.names=NULL)
str(headerCodeList)
topicList <- read.table("results_topic.txt",header=TRUE,row.names=NULL)
topicList$topicId <- factor(topicList$topicId)
str(topicList)
topicDay = interaction(networkList$day_of_year, networkList$headerCode)
allHeaderCodes <- unique(networkList$headerCode)
allDays <- unique(networkList$day_of_year)
allTopics <- unique(networkList$topicId)
templateDay <- rep(0,length(allDays))
templateHC <- rep(0,length(allHeaderCodes))
templateTopic <- rep(0,length(allTopics))
dayBetFrame <- data.frame(x=templateDay)
dayDistFrame <- data.frame(x=templateDay)
dayInDegFrame <- data.frame(x=templateDay)
dayOutDegFrame <- data.frame(x=templateDay)
dayCloseFrame <- data.frame(x=templateDay)
HCBetFrame <- data.frame(x=templateHC)
HCDistFrame <- data.frame(x=templateHC)
HCInDegFrame <- data.frame(x=templateHC)
HCOutDegFrame <- data.frame(x=templateHC)
HCCloseFrame <- data.frame(x=templateHC)
topicBetFrame <- data.frame(x=templateTopic)
topicDistFrame <- data.frame(x=templateTopic)
topicInDegFrame <- data.frame(x=templateTopic)
topicOutDegFrame <- data.frame(x=templateTopic)
topicCloseFrame <- data.frame(x=templateTopic)
allDays
